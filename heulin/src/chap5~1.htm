<HTML>
<HEAD>
   <META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
   <META NAME="GENERATOR" CONTENT="Mozilla/4.03 [fr] (Win95; I) [Netscape]">
</HEAD>
<BODY TEXT="#000000" BGCOLOR="#FFFFFF" LINK="#0000EF" VLINK="#55188A" ALINK="#FF0000">

<CENTER><B><FONT SIZE=+3>Les objets à faces pleines</FONT></B></CENTER>
 

<P><FONT SIZE=+1>Nos objets commencent à prendre de l'allure, mais
ils sont toujours en fil de fer. Pour passer à l'étape suivante
et éliminer les parties cachées, nous devons commencer par
apprendre à remplir des polygones. Dans notre cas, nous nous limiterons
aux polygones convexes, ce qui est largement suffisant en 3D. D'ailleurs,
vu que nous gérons à présent uniquement des objets
de 3DS, nous sommes surs que nous n'aurons que des triangles à remplir.
Cependant, les fonctions fournies permettront de remplir n'importe quel
type de polygones convexe, mais libre à vous de les optimiser.</FONT>

<P><B><U><FONT SIZE=+2>1/ Remplissage de polygones</FONT></U></B>

<P><FONT SIZE=+1>Si nous nous limitons aux polygones convexes, c'est qu'il
y a une bonne raison. En effet, lorsque nous dessinons un polygone, nous
traçons en fait des lignes horizontales. Avec cette restriction,
nous n'aurons besoin de stocker que l'abscisse de départ et de fin
pour chaque ligne Y de l'écran.</FONT>

<P><FONT SIZE=+1>Notre algorithme va donc devoir commencer par calculer
la coordonnée X de début et de fin de la ligne horizontale
pour chaque ligne Y. Pour cela, nous allons modifier notre algorithme de
tracé de droite, mais au lieu de dessiner des points, nous allons
stocker la coordonnée x dans un tableau approprié. Ensuite,
nous n'aurons plus qu'à dessiner des lignes horizontales entre les
coordonnées X qui auront été stockées (<A HREF="objet3.zip">objet3.zip</A>).</FONT>

<P><FONT SIZE=+1>Nous avons donc besoin de 2 tableaux pour stocker les
coordonnées de départ et de fin pour chaque ligne horizontale
:</FONT>
<UL>
<UL>
<UL>
<UL><B><FONT SIZE=+1>int startx[200];</FONT></B>
<BR><B><FONT SIZE=+1>int endx[200];</FONT></B></UL>
</UL>
</UL>
</UL>
<FONT SIZE=+1>Nous n'avons besoin que de 200 éléments puisque
nous travaillons en mode 320*200 256 couleurs. Si vous changer de mode,vous
devrez changer la taille de ces tableaux.</FONT>

<P><FONT SIZE=+1>Avant de dessiner un polygone, les valeurs de ces tableaux
sont initialisées à des valeurs impossibles dans la réalité
(j'utilise -16000, mais c'est totalement arbitraire).</FONT>

<P><FONT SIZE=+1>Maintenant il faut modifier l'algorithme de tracé
de droite, qui va stocker une valeur X pour chaque coordonnée Y.
Si la valeur contenue dans <B>startx[y] </B>vaut-16000, alors nous la stockons
dans ce   tableau, sinon cela signifie qu'une valeur y est déjà
présente, et donc nous la mettons dans <B>endx[y]</B>. Ainsi il
ne peut pas y avoir de perte d'information si notre algorithme est bien
conçu (je vous rassure, je pense que c'est le cas).</FONT>

<P><FONT SIZE=+1>Voyons ce que cela donne concrètement :</FONT>
<PRE><FONT SIZE=+1>void InitSegment(int x1, int y1, int x2,int y2)
{
  int temp,y;
  long x,pas;

  if(y2!=y1)
  {
    if(y2&lt;y1)
    {
      temp=y1;
      y1=y2;
      y2=temp;

      temp=x1;
      x1=x2;
      x2=temp;
    }

    x  = x1&lt;&lt;8;
    pas= ((x2-x1)&lt;&lt;8)/(y2-y1);

    x+=pas;
    y1++;

    if(y1&lt;miny) miny=y1;
    if(y2>maxy) maxy=y2;

    for(y=y1;y&lt;=y2;y++)
    {
      if((y>=0) &amp;&amp; (y&lt;Ymax))
        if(startx[y]==-16000)
          startx[y]=x>>8;
        else
          endx[y]=x>>8;
      x+=pas;
    }
  }
}</FONT></PRE>
<FONT SIZE=+1>Pour accélérer les calculs, nous travaillons
en arithmétique entière. En fait, nous utilisons des chiffres
à virgule fixe. L'abscisse <B>X </B>est multipliée par <B>256
</B>et nous lui ajoutons à chaque étape la valeur <B>pas</B>,
qui est une constante. On ne calcule qu'une seule coordonnée X par
ligne Y.</FONT>

<P><FONT SIZE=+1>Ce type de calcul en virgule fixe peut être adapté
à l'assembleur de façon très efficace, et fournir
un code d'une rapidité assez étonnante. Faites l'essai, le
résultat en vaut le coût.</FONT>

<P><FONT SIZE=+1>Du point de vue utilisateur, nous n'avons pas besoin d'appeler
cette fonction. Pour remplir un polygone, nous devons lui passer en paramètre
un pointeur sur un tableau de point, le nombre de points du polygone et
la couleur à utiliser. Le reste est entièrement géré
par la fonction <B>FillPoly().</B> C'est elle qui fera appel à <B>InitSegment()</B>
pour chacune des arêtes du polygone, et qui tracera les lignes horizontales.</FONT>
<PRE><FONT SIZE=+1>void FillPoly(point *vertexlist, int numvertex, int color)
{
  int i;
  point *curpt,*nextpt;

  miny=Ymax;
  maxy=0;

  /* On fait appel a InitSegment pour chaque arête */</FONT></PRE>

<PRE><FONT SIZE=+1>  curpt  = vertexlist;
  nextpt = vertexlist+1;

  for(i=1;i&lt;numvertex;i++)
  {
    InitSegment(curpt->x,curpt->y,nextpt->x,nextpt->y);
    curpt++;
    nextpt++;
  }

  nextpt = vertexlist;
  InitSegment(curpt->x,curpt->y,nextpt->x,nextpt->y);

  if(miny&lt;0) miny=0;
  if(maxy>=Ymax) maxy=Ymax-1;

  /* On trace les lignes horizontales */</FONT></PRE>

<PRE><FONT SIZE=+1>  for(i=miny;i&lt;=maxy;i++)
    {
      if(endx[i]==-16000)
        PutPixel(startx[i],i,color);
      else
        Hline(startx[i],endx[i],i,color);

      startx[i]=endx[i]=-16000;
    }
}</FONT></PRE>
<FONT SIZE=+1>Au lieu de faire appel au tracé de droite classique,
qui fonctionnerait parfaitement, il est préférable d'utiliser
une fonction spécifique qui sera optimisée. Il s'agit de
la fonction Hline :</FONT>
<PRE><FONT SIZE=+1>void Hline(int x1,int x2,int y, int color)
{
  int x,offset;

  if (y&lt;0 || y>=Ymax) return;

  if(x1>x2)
    {
      x=x1;
      x1=x2;
      x2=x;
    }

  offset=y*320+x1;

  for(x=x1;x&lt;=x2;x++)
    {
      if(x>=0 &amp;&amp; x&lt;Xmax)
        screen[offset]=color;
      offset++;
    }
}</FONT></PRE>
<FONT SIZE=+1>Rien de plus simple en somme. Remarquez cependant que le
test suivant</FONT>
<CENTER><B><FONT SIZE=+1>if(x>=0 &amp;&amp; x&lt;Xmax)</FONT></B></CENTER>


<P><FONT SIZE=+1>permet de réaliser un clipping des plus primaires,
mais efficace.</FONT>

<P><FONT SIZE=+1>Voici un exemple d'utilisation de la fonction de remplissage
de polygone :</FONT>
<PRE><FONT SIZE=+1>void Remplir(face facette)

{
  point p[3];

  p[0] = Point2D[facette.a];
  p[1] = Point2D[facette.b];
  p[2] = Point2D[facette.c];

  FillPoly(p,3,facette.couleur);
}</FONT></PRE>
<B><U><FONT SIZE=+2>2/ Les faces cachées</FONT></U></B>

<P><FONT SIZE=+1>Avant de remplir chacune des facettes de notre objet 3D,
nous devons éliminer celles qui ne sont pas visibles par l'observateur.
Dans le cas d'un objet convexe comme un cube ou une sphère, cela
sera satisfaisant (<A HREF="objet2.zip">objet2.zip</A>) . Pour des objets
concaves, tels un tore ou le petit canard, il faudra en plus trier les
facettes selon leur distance à l'observateur (<A HREF="objet3.zip">objet3.zip</A>).</FONT>

<P><FONT SIZE=+1>Étant donné les restrictions que nous avons
fait sur la position de l'observateur, il nous est facile de calculer la
visibilité d'une face. Il suffit en effet de tester le signe de
sa normale Pour obtenir la normale d'une face, il faut faire ce que l'on
appelle un produit vectoriel : on associe à deux vecteurs un troisième
qui leur est perpendiculaire.</FONT>
<CENTER><IMG SRC="vectoriel.gif" HEIGHT=120 WIDTH=300></CENTER>


<P><FONT SIZE=+1>Voilà ce que cela donne en C :</FONT>
<PRE><FONT SIZE=+1>int Visible(face f)
{
  long a1,a2,b1,b2;

  a1 = Point2D[f.a].x - Point2D[f.b].x;
  b1 = Point2D[f.a].y - Point2D[f.b].y;
  a2 = Point2D[f.c].x - Point2D[f.b].x;
  b2 = Point2D[f.c].y - Point2D[f.b].y;

  if ((a1*b2-b1*a2)&lt;0) return 0;
  return 1;
}</FONT></PRE>
<FONT SIZE=+1>Il est possible d'éviter ce calcul en pré calculant
la normale à chaque facette, et à lui faire subir les mêmes
transformations qu'aux sommets (je pense aux rotations). Dans ce cas, il
suffirait de tester le signe de la composante Z de la normale. Nous verrons
comment faire lorsque l'on voudra illuminer nos objets.</FONT>

<P><FONT SIZE=+1>En attendant, vous pouvez animer sans problème
des objets convexes (<A HREF="objet2.c">objet2.zip</A>) Cela marche aussi
avec des objets concaves (ex duck.asc) mais il y a des parties que l'on
voit et qui devraient être invisibles. Une seule solution : remplir
les polygones, et les afficher par ordre décroissant de leur distance
à l'observateur. On pourra ainsi éliminer toutes les parties
invisibles depuis le point d'observation (<A HREF="objet3.zip">objet3.zip</A>).</FONT>

<P><B><U><FONT SIZE=+2>3/ Trier les facettes</FONT></U></B>

<P><FONT SIZE=+1>Pour tirer nos facettes, nous devons rajouter une information
supplémentaire : la distance de cette facette à l'observateur,
qui sera dans notre cas la distance z moyenne de la facette.</FONT>
<PRE><B><FONT SIZE=+1>typedef struct
{
  int a,b,c;
  unsigned char couleur;  /* couleur propre de la facette  */
  double z;               /* profonceur moyenne de la face */
} face;

</FONT></B><FONT SIZE=+1>point3D Sommet[1000];   
point3D Point3D[1000];  
point   Point2D[1000];  

<B>face    Facette[1000];  /* les facettes de l'objet      */
int     tri[1000];      /* tableau trie des facettes    */

</B>int     Nb_points = 0;
int     Nb_faces  = 0;
<B>int     Nb_visibles;    /* pour connaitre le nombre de faces visibles */</B></FONT></PRE>
<FONT SIZE=+1>Nous utiliserons également un tableau <B>tri[]</B>,
qui contiendra l'indice des facettes classées selon leur distance
Z, ainsi qu'une variable Nb_visible pour connaître le nombre de facettes
qui sont partiellement visibles. Pour afficher notre objet, la fonction
utilisée deviendra alors :</FONT>
<PRE><FONT SIZE=+1>void Afficher(void)
{
  int i;

  TrierFacettes();

  ClearBuffer();

  for(i=0;i&lt;Nb_visibles;i++)
    Remplir(Facette[tri[i]]);

  WaitVbl();
  ShowBuffer();
}</FONT></PRE>
<FONT SIZE=+1>Pour trier les facettes, nous avons besoin de connaître
la profondeur moyenne de chacune des faces composant la scène à
afficher. Il suffit donc de faire la somme de chacune des 3 composantes
Z de chaque sommet. Il est d'ailleurs inutile de diviser cette somme par
3, cela ne changera rien pour le tri. Enfin, on tri le tableau des facettes
<B>visibles </B>(pour ne pas afficher des facettes qui de toutes façon
seront totalement recouvertes). Personnellement, j'utilise un QuickSort
pour sa rapidité et sa simplicité, mais vous pouvez utiliser
votre procédure de tri si cela vous chante.</FONT>
<PRE><FONT SIZE=+1>void TrierFacettes(void)
{
  int i;

  Nb_visibles=0;

  for(i=0;i&lt;Nb_faces;i++)
    if(visible(Facette[i]))
    {
      Facette[i].z =  Point3D[Facette[i].a].z
                    + Point3D[Facette[i].b].z
                    + Point3D[Facette[i].c].z;

      tri[Nb_visibles]=i;
      Nb_visibles++;
    }

  Quick_Sort(0,Nb_visibles-1);
}</FONT></PRE>
<FONT SIZE=+1>Toutes les sources et l'exécutable sont disponibles
dans <A HREF="objet3.zip">objet3.zip</A>. Pour l'utiliser, vous pouvez
taper par exemple :</FONT>
<CENTER><B><FONT SIZE=+1>objet3 duck.asc</FONT></B></CENTER>

<CENTER><IMG SRC="objet3.gif" HEIGHT=200 WIDTH=320></CENTER>

<CENTER><I><FONT SIZE=+1>Objet en faces pleines</FONT></I></CENTER>


<P><FONT SIZE=+1>Les facettes sont affichées avec une couleur aléatoire
qui est fixée lors du chargement de l'objet contenu dans le fichier
.ASC. Ce n'est pas très joli, mais maintenant vous maîtrisez
parfaitement la 3D, et c'est déjà pas si mal !</FONT>
<PRE><FONT SIZE=+1>/************************************************************************/
/* Quick_Sort() : tri le tableau des facettes visibles                  */
/************************************************************************/

void Quick_Sort(int deb, int fin)
{
  int   i=deb;
  int   j=fin;
  double milieu=Facette[tri[(deb+fin)/2]].z;
  int   temp;

  while(i&lt;=j)
  {
    while(Facette[tri[i]].z > milieu) i++;
    while(Facette[tri[j]].z &lt; milieu) j--;

    if(i&lt;=j)
    {
      temp=tri[i];
      tri[i]=tri[j];
      tri[j]=temp;
      i++; j--;
    }
  }

  if(i&lt;fin) Quick_Sort(i,fin);
  if(deb&lt;j) Quick_Sort(deb,j);
}</FONT></PRE>
<B><U><FONT SIZE=+2>4/ Technique du Z-Buffer</FONT></U></B>

<P><FONT SIZE=+1>Le Z-Buffer a été développé
par Catmul en 1974. C'est l'algorithme le plus simple pour dessiner une
scène tridimensionnelle contenant des faces cachées. Son
implémentation est très simple, et consiste à avoir
en plus du buffer image (endroit où l'on dessine notre scène)
un buffer du profondeur, appelé <B>Z-Buffer</B>. Ce tableau doit
être exactement de la même taille que l'espace image, et va
contenir pour chaque pixel la valeur Z associée.</FONT>

<P><FONT SIZE=+1>Concrètement, si l'on dessine le pixel de coordonnées
(x,y,z), dans notre espace image le pixel (x',y') sera allumé et
la valeur z sera stockée dans le Z-Buffer au même emplacement.
La plus grosse valeur Z qui sera autorisée à être stockée
sera ainsi la valeur du clipping en profondeur. Au commencement, note Z-Buffer
est entièrement initialisé à 0.</FONT>

<P><FONT SIZE=+1>Lors du processus de remplissage d'un polygone, si le
point (x,y) à dessiner est plus près de l'observateur que
le point précédent, alors on stocke ce point dans l'espace
image, sinon on passe au pixel suivant.</FONT>

<P><FONT SIZE=+1>Voici un pseudo-code en C qui pourrait correspondre à
l'implémentation de cette technique :</FONT>
<PRE><FONT SIZE=+1>void Z_Buffer()
{
  int x,y;

  for(y=0;y&lt;YMAX;y++)
    for(x=0;x&lt;XMAX;x++)
      PutPixel(x,y,COULEUR_DU_FOND);    /* usuellement on met 0           */
                                        /* consiste juste a vider l'ecran */

  for(chaque polygone)
    for(chaque point du polygone projete)
      double z = profondeur du pixel de coord (x,y) a l'ecran           
      if(z>LireZ(x,y))     /* retourne la valeur du buffer Z en (x,y)   
        {
          EcrireZ(x,y,z);
          PutPixel(x,y,couleur);
        }
 
}</FONT></PRE>
<FONT SIZE=+1>Nous n'avons à présent plus besoin de trier
nos objets pour appliquer cet algorithme. Je vous laisse le soin d'implémenter
cet algorithme. Un dernier point cependant. Nous pouvons améliorer
et simplifier le calcul de la valeur z de chaque point en s'appuyant sur
le fait qu'on ne travaille qu'avec des polygones plats (c'est généralement
le cas). Pour calculer la valeur z d'un point, nous devrions en principe
résoudre l'équation du plan <B>Ax + By + Cz +D = 0</B>, soit
pour z:</FONT>
<CENTER><B><FONT SIZE=+1>z = (-D -Ax -By)/C</FONT></B></CENTER>


<P><FONT SIZE=+1>Maintenant, si pour le point (x,y) nous avons trouvé
pour z la valeur z1, au point (x+dx,y) nous aurons pour z:</FONT>
<CENTER><B><FONT SIZE=+1>z1-(A/C)*dx</FONT></B></CENTER>


<P><FONT SIZE=+1>A/C est constant, et dans notre algorithme de remplissage
de polygone dx=1. On peut procéder de même pour avoir un calcul
incrémental sur y.</FONT>

<P>
<HR WIDTH="100%">

<P><FONT SIZE=+1><A HREF="Plan3D.html">[Sommaire]</A> <A HREF="chap4.html">[Précédent]</A>
<A HREF="chap6.html">[Suivant]</A> <A HREF="../accueil.html" TARGET="Contenu">[Home
Page]</A></FONT>

<P><FONT SIZE=+1>Page réalisée par <A HREF="../cv.html" TARGET="Contenu">Christophe
Heulin.</A></FONT>
<BR><FONT SIZE=+1>Renseignements, critiques, informations : <A HREF="mailto:heulin@multimania.com">heulin@multimania.com</A></FONT>
</BODY>
</HTML>
